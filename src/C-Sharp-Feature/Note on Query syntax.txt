A query expression must begin with a from clause and must end with a select or group clause.
Between the first from clause and the last select or group clause, it can contain one or more
of these optionalc lauses: where, orderby, join, let and even additional from clauses. 
You can also use the into keyword to enable the result of a join or group clause to serve as
the source for additional query clauses in the same query expression.



Query Syntax starts with from clause and can be end with Select or GroupBy clause.
Use various other opertors like filtering, joining, grouping, sorting operators to construct the desired result.



                       :  Some Data source  :
===============================================================================
List<Country> countries = new List<Country>()
{
    new Country { Name = "China", Population = 14_000_000 },
    new Country { Name = "India", Population = 13_000_000 },
    new Country { Name = "United States", Population = 330_000_000 },
    new Country { Name = "Indonesia", Population = 270_000_000 },
    new Country { Name = "Pakistan", Population = 220_000_000 },
    new Country { Name = "Bangladesh", Population = 160_000_000 },
    new Country { Name = "Japan", Population = 126_000_000 },
    new Country { Name = "Philippines", Population = 110_000_000 },
    new Country { Name = "Vietnam", Population = 97_000_000 },
    new Country { Name = "Turkey", Population = 84_000_000 },
    new Country { Name = "Iran", Population = 83_000_000 },
    new Country { Name = "Thailand", Population = 68_000_000 },
    new Country { Name = "Myanmar", Population = 54_000_000 },
};
// percentileQuery is an IEnumerable<IGrouping<int, Country>>
var percentileQuery = from n in countries
                      let percent = n.Population / 10_000_000
                      group n by percent into g
                      where g.Key >= 20
                      orderby g.Key ascending
                      select g;



// grouping is an IGrouping<int, Country>
foreach (var grouping in percentileQuery)
{
    Console.WriteLine(grouping.Key);
    foreach (var country in grouping)
    {
        Console.WriteLine(country.Name + ":" + country.Population);
    }
}
class Country
{
    public string Name { get; set; }
    public int Population { get; set; }
}

===============================================================================
List<Country> countries = new List<Country>()
{
    new Country { Name = "China", Population = 14_000_000 , Area = 232},
    new Country { Name = "India", Population = 13_000_000 , Area = 232 },
    new Country { Name = "United States", Population = 330_000_000 , Area = 232 },
    new Country { Name = "Indonesia", Population = 270_000_000  , Area = 232},
    new Country { Name = "Pakistan", Population = 220_000_000 , Area = 232 },
    new Country { Name = "Bangladesh", Population = 160_000_000 , Area = 232 },
    new Country { Name = "Japan", Population = 126_000_000  , Area = 232},
    new Country { Name = "Philippines", Population = 110_000_000  , Area = 232},
    new Country { Name = "Vietnam", Population = 97_000_000  , Area = 112},
    new Country { Name = "Turkey", Population = 83_000_000 , Area = 111 },
    new Country { Name = "Iran", Population = 84_000_000  , Area = 111},
    new Country { Name = "Thailand", Population = 68_000_000 , Area = 232 },
    new Country { Name = "Myanmar", Population = 54_000_000  , Area = 232},
};
// percentileQuery is an IEnumerable<IGrouping<int, Country>>
var percentileQuery = from country in countries
                      orderby country.Area descending, country.Population ascending
                      select country;


foreach (var x in percentileQuery)
{
    Console.WriteLine($"{x.Name}            \t\t\t    {x.Area}\t\t{x.Population}");
}


class Country
{
    public string Name { get; set; }
    public int Population { get; set; }
    public int Area { get; set; }
}
===============================================================================
===============================================================================
===============================================================================
===============================================================================
===============================================================================